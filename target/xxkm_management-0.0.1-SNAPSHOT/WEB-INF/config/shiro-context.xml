<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 配置管理缓存的 CacheManager -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 配置 EhCache 的配置文件 -->
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>

	<!-- 配置 Realm. 可以来访问数据库资源, 例如授权和认证的信息 -->
	<!-- 需要自定义 Realm. 1. 认证, 可以继承 AuthenticatingRealm 类, 实现 doGetAuthenticationInfo 
		方法. 2. 授权, 可以继承 AuthorizingRealm 类, 实现 doGetAuthorizationInfo 3. 而 AuthorizingRealm 
		继承了 AuthenticatingRealm, 所以只需要继承 AuthorizingRealm 即可. -->
	<bean id="realm" class="com.kelan.riding.system.web.KelanRealm">
		<property name="cachingEnabled" value="true" />
		<!-- <property name="authenticationCachingEnabled" value="true" /> <property 
			name="authenticationCacheName" value="authenticationCache" /> -->
		<property name="authorizationCachingEnabled" value="true" />
		<property name="authorizationCacheName" value="authorizationCache" />
	</bean>

	<!-- 配置 Shiro 的 SecurityManage Bean. -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="realm" />
		<property name="cacheManager" ref="cacheManager" />
		<property name="sessionManager" ref="sessionManager" /><!-- 配置sessionListener -->
	</bean>

	<!-- <bean id="kickoutSessionControlFilter" class="com.kelan.core.shiro.KickoutSessionControlFilter">
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="cacheManager" />
		<property name="kickoutAfter" value="false" />
		<property name="maxSession" value="1" />
		<property name="kickoutUrl" value="/kickOutUser" />
	</bean> -->

	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- <property name="globalSessionTimeout" value="1000"/> -->
		<!-- <property name="deleteInvalidSessions" value="false"/> -->
		<property name="sessionListeners" ref="sessionListener" />
		<!-- <property name="sessionFactory" ref="sessionFactory" /> -->
	</bean>

	<!-- <bean id="sessionFactory" class="com.kelan.core.shiro.OnlineSessionFactory"></bean> -->

	<bean id="sessionListener" class="com.kelan.core.util.ShiroSessionListener"></bean>

	<!-- 配置可以自动调用 Spring 中 Shiro 实体对象的生命周期方法的 BeanPostProcessor -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 以下两个 bean 可以使 Shiro 的注解起作用. 前提是必须配置 LifecycleBeanPostProcessor -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<!-- <bean id="filterChainDefinitionsBuilder" class="com.kelan.riding.system.web.FilterChainDefinitionsBuilder"></bean> -->


	<!-- 配置 ShiroFilter！ -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/loginDenied" />
		<property name="unauthorizedUrl" value="/unAuthorized" />
		<property name="filters">
			<map>
				<entry key="authc">
					<bean class="com.kelan.core.shiro.CustomFormAuthenticationFilter" />
				</entry>
				<entry key="roles">
					<bean class="com.kelan.core.shiro.CustomRolesAuthorizationFilter" />
				</entry>
				<!-- <entry key="kickout" value-ref="kickoutSessionControlFilter" /> -->
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/addRoles = roles[admin]
				/getUserById = roles[user]
				/logout = logout
			</value>
		</property>
		<!-- <property name="filterChainDefinitionMap"> <bean factory-bean="filterChainDefinitionsBuilder" 
			factory-method="getFilterChainDefinitionsBuilder"></bean> </property> -->
	</bean>

</beans>
